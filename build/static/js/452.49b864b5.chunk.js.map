{"version":3,"file":"static/js/452.49b864b5.chunk.js","mappings":"0PAEaA,EAAmB,SAACC,GAC7B,IAAK,IAAIC,KAAOD,EACZ,GAAIA,EAAIE,eAAeD,GAAM,CACzB,IAAME,EAAQH,EAAIC,GAClB,IAAK,CAAC,OAAQ,KAAM,kBAAkBG,SAASH,KAC7B,OAAVE,GAA4B,KAAVA,GAAgBE,MAAMF,IACxC,MAAO,CAACF,IAAAA,EAAKE,MAAAA,EAGzB,CAEJ,OAAO,CACX,EAEAJ,EAAiBO,UAAY,CACzBN,IAAKO,IAAAA,OAAAA,Y,kKCHHC,EAAU,CACZC,aAAc,MACdC,OAAQ,uBAKG,SAASC,EAAU,GAO9B,IANAC,EAAI,EAAJA,KACAC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAa,EAAbA,cACAC,EAAgB,EAAhBA,iBACGC,GAAI,YAKDC,GAA8BC,EAAAA,EAAAA,cAAY,SAACC,GAC7CC,OAAOC,oBAAoB,CAACC,KAAMH,EAAMG,KAAMC,QAASJ,EAAMI,UAC7DC,QAAQC,IAAIN,EAChB,GAAG,IAEGO,GAAkBR,EAAAA,EAAAA,cAAY,SAACS,GACjCZ,GAAiB,kBAAID,GAAa,cAAGa,EAAK,CAACC,KAAMC,EAAAA,GAAAA,QACrD,GAAG,CAACf,IAEEgB,GAAkBZ,EAAAA,EAAAA,cAAY,SAACS,GACjCZ,GAAiB,kBAAID,GAAa,cAAGa,EAAK,CAACC,KAAMC,EAAAA,GAAAA,SACjDb,EAAKe,gBAAe,EACxB,GAAG,CAACjB,IAEEkB,GAAoBd,EAAAA,EAAAA,cAAY,SAACS,GACnCZ,GAAiB,kBAAID,GAAa,cAAGa,EAAK,CAACC,KAAMC,EAAAA,GAAAA,KAAmBI,qBAAqB,MAEvErB,EAAKsB,MAAK,SAAAC,GAAI,OAAIA,EAAKR,KAAOA,CAAE,IACpCS,OACVpB,EAAKqB,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAJ,GAAI,OAAIA,EAAKR,KAAOA,CAAE,GAAC,IAE5DX,EAAKe,gBAAe,EACxB,GAAG,CAACjB,IAEE0B,GAAmBtB,EAAAA,EAAAA,aAAW,yCAChC,WAAOuB,EAAQC,GAAM,4FACX,IAAIC,SAAQ,SAACC,EAASC,GAOxB,IAAM3C,EAAQJ,EAAiB2C,GAC/B,IAAc,IAAVvC,EACA,OAAO2C,EAAO,CAACvB,KAAM,QAASC,QAAQ,GAAD,OAAKrB,EAAMF,IAAG,qBAAaE,EAAMA,SAE1E0C,GACJ,IAAE,UACEE,KAAKC,UAAUN,KAAYK,KAAKC,UAAUL,GAAO,gBAI/C,OAHFtB,OAAOC,oBAAoB,CACvBC,KAAM,UACNC,QAAS,0DACX,kBACKmB,GAAM,WAEVD,EAAOL,MAAM,CAAD,gBAST,OARuBK,EAAlBL,MAAUpB,GAAI,OAAIyB,EAAM,GAC/BrB,OAAO4B,SAASC,EAAAA,EAAAA,2BAA+C,CAC3DC,MAAK,UAAKlC,GACVmC,WAAYxC,EAAKyC,UAErBhC,OAAOC,oBAAoB,CACvBC,KAAM,UACNC,QAAS,6BACX,kBACKP,GAAI,QAST,OAPFI,OAAO4B,SAASC,EAAAA,EAAAA,gBAAoC,CAChDR,OAAAA,EACAU,WAAYxC,EAAKyC,UAErBhC,OAAOC,oBAAoB,CACvBC,KAAM,UACNC,QAAS,8BACX,kBACKkB,GAAM,4CAGxB,qDA7C+B,GA6C7B,IAGDY,GAAiCC,EAAAA,EAAAA,UACnC,mCACOzC,GAAO,CACV,CACI0C,MAAO,SACPC,WAAY,SACZC,MAAO,SACPnC,KAAM,UACNoC,UAAU,EACVC,WAAY,SAACC,GAAY,IAAD,EACdC,GAAuC,QAAxB,EAAA/C,EAAc8C,EAAOjC,WAAG,aAAxB,EAA0BC,QAASC,EAAAA,GAAAA,KACxD,OAAIgC,EACO,EACH,SAACC,EAAA,EAAmB,CAChBC,MAAM,SAACC,EAAA,EAAQ,CAACC,GAAI,CAACC,KAAM,WAC3BC,MAAM,OACNC,QAAS,SAAAC,GACLrD,EAAKe,gBAAe,GACpBD,EAAgB8B,EAAOjC,GAC3B,KAEJ,SAACmC,EAAA,EAAmB,CAChBC,MAAM,SAACO,EAAA,EAAU,CAACL,GAAI,CAACC,KAAM,SAC7BC,MAAM,SACNI,UAAU,cACVH,QAAS,SAAAC,GACLrD,EAAKe,gBAAe,GACpBC,EAAkB4B,EAAOjC,GAC7B,EACA6C,MAAM,aAIX,EACH,SAACC,EAAA,EAAO,CAACC,MAAM,OAAM,UACjB,SAACZ,EAAA,EAAmB,CAChBC,MAAM,SAACY,EAAA,EAAQ,CAACV,GAAI,CAACC,KAAM,WAC3BC,MAAM,OACNS,UAA2B,IAAjBf,GAAyB7C,EAAK6D,YACxCT,QAAS,SAAAC,GACLrD,EAAKe,gBAAe,GACpBL,EAAgBkC,EAAOjC,GAC3B,MAIhB,IACH,GACF,CAACb,EAAegB,EAAiBE,EAAmBN,EAAiBV,EAAK6D,cAGjF,OACI,SAACC,EAAA,GAAQ,QACLb,GAAI1D,EACJK,KAAMA,EACNC,QAASwC,EACT0B,SAAU,SAAAC,GAAG,OAAIA,EAAIrD,EAAE,EACvBsD,SAAU,GACVC,mBAAoB,CAAC,GAAI,IAEzBC,SAAS,MACTC,eAxImB,SAACxB,EAAQyB,GAAK,OAAKA,EAAMC,qBAAsB,CAAK,EAyIvEC,cAxIkB,SAAC3B,EAAQyB,GAAK,OAAKA,EAAMC,qBAAsB,CAAK,EAyItEE,qBAAsB,CAACC,eAAe,GACtCC,sBAAuB,SAAAC,GAAK,OAAI5E,EAAiB4E,EAAM,EACvD7E,cAAeA,EACf0B,iBAAkBA,EAClBoD,wBAAyB3E,GACrBD,GAGhB,CAGAN,EAAUL,UAAY,CAClBM,KAAML,IAAAA,OAAAA,WACNM,KAAMN,IAAAA,MAAAA,WACNO,QAASP,IAAAA,MAAAA,WACTQ,cAAeR,IAAAA,OAAAA,WACfS,iBAAkBT,IAAAA,KAAAA,WAClBU,KAAMV,IAAAA,O,yGCrLGuF,EAAmB,SAAH,GAA4D,IAAvDlE,EAAE,EAAFA,GAAIzB,EAAK,EAALA,MAAO4F,EAAO,EAAPA,QAASC,EAAG,EAAHA,IAAKC,EAAgB,EAAhBA,iBAAkB5D,EAAK,EAALA,MACzE,OACI,SAAC,IAAM,CACH6D,WAAS,EACT/F,MAAOA,EACPgG,SAAU,SAAAC,GACN,IAAIH,EAAiBI,QAAUhE,EAC3B,OAAO2D,EAAIM,iBAAiB,CAAC1E,GAAAA,EAAI4B,MAAO,OAAQrD,MAAOiG,EAAEG,OAAOpG,QAEjE8F,EAAiBI,QAAU,IACtBJ,EAAiB7F,SAASgG,EAAEG,OAAOpG,OAGnCkB,OAAOC,oBAAoB,CACvBC,KAAM,UACNC,QAAS,2BAJbwE,EAAIM,iBAAiB,CAAC1E,GAAAA,EAAI4B,MAAO,OAAQrD,MAAOiG,EAAEG,OAAOpG,QASrE,EACAqG,YAAa,SAACC,GAAQ,OAAKA,CAAQ,EAAC,SAEnCV,EAAQW,KAAI,SAAAtE,GAAI,OACb,SAAC,IAAQ,CAAYjC,MAAOiC,EAAK,SAAEA,GAApBA,EAAoC,KAInE,EAEA0D,EAAiBxF,UAAY,CACzBsB,GAAIrB,IAAAA,OAAAA,WACJJ,MAAOI,IAAAA,OAAAA,WACPwF,QAASxF,IAAAA,MAAAA,WACTyF,IAAKzF,IAAAA,OAAAA,W,+PCrCIoG,EAA8B,SAAC7F,GACxC,IAAM4B,EAAS,CAAC,EAYhB,OAXA5B,EAAQ8F,SAAQ,SAAAC,GACZ,OAAQA,EAAOrD,OACX,IAAK,OACDd,EAAOmE,EAAOrD,OAAS,GACvB,MACJ,IAAK,SACD,MACJ,QACId,EAAOmE,EAAOrD,OAAS,EAEnC,IACOd,CACX,ECdaoE,EAAkB,SAACC,GAG5B,OAFqBA,EAAOC,QAAQ,SAAU,KAE1BA,QAChB,UACA,SAAUC,GACN,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,aACvD,GAER,E,SCSMC,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAc,gBAAEE,EAAK,EAALA,MAAK,MAAO,CAC1CC,OAAQ,OACRhH,OAAO,aAAD,OAAe+G,EAAME,QAAqB,aAChDC,gBAAiBH,EAAME,QAAmB,UAC1ClH,aAAc,cACdoH,cAAe,MACfC,WAAY,SACZC,QAAS,SACTC,eAAgB,gBACnB,IAec,SAASC,EAAc,GAA0E,IAAzE3F,EAAO,EAAPA,QAASwC,EAAW,EAAXA,YAAa9C,EAAc,EAAdA,eAAgBhB,EAAgB,EAAhBA,iBAAkBJ,EAAI,EAAJA,KAAME,EAAO,EAAPA,QAC1FoH,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK,IAAzCH,MACP,GAA0BI,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,0BAAwB,eAApDpI,EAAK,KAAEqI,EAAQ,KAChBC,EAAY,yCAAG,yFACjBzG,GAAe,GACTJ,GAAK8G,EAAAA,EAAAA,UAAS,IACpBpG,GAAQ,SAAAC,GACJ,MAAM,GAAN,eAAWA,GAAI,kBAAGX,GAAAA,GAAO+E,EAA4B7F,IAAQ,IAAEuB,OAAO,KAC1E,IACArB,GAAiB,SAAAuB,GACb,OAAO,kBACAA,GAAI,cACNX,EAAK,CAACC,KAAMC,EAAAA,GAAAA,KAAmB6G,aAAc,SAEtD,IAAE,2CACL,kBAZiB,mCAalB,OACI,UAACrB,EAAS,YACN,SAACsB,EAAA,EAAM,CACHC,KAAM/B,EAAgBlG,EAAKyC,QAC3Ba,GAAI,CAACO,MAAO,YAGhB,UAAC+C,EAAA,EAAK,CAACsB,UAAU,MAAMC,IAAI,OAAOjB,WAAW,SAAQ,WACjD,UAACN,EAAA,EAAK,CAACsB,UAAU,MAAMC,IAAI,OAAOjB,WAAW,SAAQ,WACjD,SAACc,EAAA,EAAM,CAACC,KAAK,kBACb,SAACG,EAAA,EAAc,CACXnE,SAAUC,EACVmE,QAAM,OAAMf,GACZ/H,MAAOA,EACPgG,SAAU,SAAAC,GACNoC,EAASpC,EAAEG,OAAOpG,OAClBkB,OAAO4B,UAASiG,EAAAA,EAAAA,kBAAiB,CAC7BC,IAAKvI,EAAKuI,IACV/F,WAAYxC,EAAKyC,OACjB+F,aAAchD,EAAEG,OAAOpG,QAE/B,EACAkJ,KAAK,gBAIb,SAAC3E,EAAA,EAAO,CAACC,MAAM,MAAM2E,UAAU,SAAQ,UACrC,2BACE,SAACC,EAAA,EAAU,CACP1E,SAAUC,EACVT,QAASoE,EAAa,UAExB,SAACe,EAAA,EAAO,CACJtF,GAAI,gBAAEyD,EAAO,EAAPA,QAAO,MAAO,CAChBxD,KAAMW,EAAc6C,EAAqB,YAAIA,EAAoB,WACpE,eAQ3B,CAEAM,EAAc3H,UAAY,CACtBgC,QAAS/B,IAAAA,KAAAA,WACTuE,YAAavE,IAAAA,KAAAA,WACbyB,eAAgBzB,IAAAA,KAAAA,WAChBS,iBAAkBT,IAAAA,KAAAA,WAClBK,KAAML,IAAAA,OAAAA,WACNO,QAASP,IAAAA,MAAAA,W,uMCnGKgH,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAc,YAAO,EAALE,MAAK,MAAO,CAAC,CAAC,IAIjC,SAASgC,IAAkB,IAAD,EAC9B7I,GAAQuH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK,IAAxCzH,KACP,GAAoC0H,EAAAA,EAAAA,UAAS,CACzCoB,QAAS,EACTC,SAAU,IACZ,eAHKC,EAAU,KAAEC,EAAa,MAKhCC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,EAAkC,OAAJlJ,QAAI,IAAJA,GAAe,QAAX,EAAJA,EAAMmJ,iBAAS,WAAX,EAAJ,EAAiBC,KAAKC,QAChD,SAACC,EAAKC,GACF,IAAQT,EAAqBS,EAArBT,QAASC,EAAYQ,EAAZR,SAGjB,OAFAO,EAAIR,SAAWA,EACfQ,EAAIP,UAAYA,EACTO,CACX,GACA,CAAER,QAAS,EAAGC,SAAU,IAPpBD,EAAO,EAAPA,QAASC,EAAQ,EAARA,SASjBE,EAAc,CAAEH,QAAAA,EAASC,SAAAA,GAC7B,GAAG,CAAC/I,EAAKmJ,UAAUC,OAEnB,IAAQN,EAAsBE,EAAtBF,QAASC,EAAaC,EAAbD,SACjB,OACI,UAACS,EAAA,EAAmB,YAChB,UAAC5C,EAAA,EAAK,CAACsB,UAAU,MAAMhB,WAAW,SAASuC,EAAE,aAAatB,IAAI,OAAM,WAChE,SAACH,EAAA,EAAM,CAACC,KAAI,oBAAYa,EAAQY,QAAQ,IAAMpG,GAAI,CAACO,MAAO,cAC1D,SAACmE,EAAA,EAAM,CAACC,KAAI,wBAAgBc,EAASW,QAAQ,IAAMpG,GAAI,CAACO,MAAO,cAC/D,SAACmE,EAAA,EAAM,CAACC,KAAI,sBAAca,EAAUC,GAAUW,QAAQ,IAAMpG,GAAI,CAACO,MAAO,cACxE,SAACmE,EAAA,EAAM,CAACC,KAAI,mBAAgB,OAAJjI,QAAI,IAAJA,GAAe,QAAX,EAAJA,EAAMmJ,iBAAS,WAAX,EAAJ,EAAiBC,KAAK3D,QAAWnC,GAAI,CAACO,MAAO,iBAEzE,SAAC8F,EAAA,EAAc,MAG3B,C,uBC3BMjD,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAc,YAAO,EAALE,MAAK,MAAO,CAC1C+C,OAAQ,OACR9C,OAAQ,qBACX,IAIc,SAAS+C,IACpB,IAAO7J,GAAQuH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK,IAAxCzH,KACP,GAAwB0H,EAAAA,EAAAA,UAAS,IAAG,eAA7BzH,EAAI,KAAEyB,EAAO,KACdoI,GAAenH,EAAAA,EAAAA,UAAQ,kBAAMoH,EAAAA,EAAAA,WAAU/J,EAAKmJ,UAAUnI,GAAG,GAAE,CAAChB,EAAKmJ,UAAUnI,KACjF,GAA0C0G,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA/CvH,EAAa,KAAEC,EAAgB,KACtC,GAAsCsH,EAAAA,EAAAA,WAAS,GAAM,eAA9CxD,EAAW,KAAE9C,EAAc,MAElC8H,EAAAA,EAAAA,YAAU,SAAAxF,GACNhC,EAAQ1B,EAAKmJ,UAAUC,KAC3B,GAAG,CAACpJ,EAAKmJ,UAAUnI,GAAIhB,EAAKmJ,UAAUC,OAEtC,IAAMlJ,EAAU,CACR,CACI0C,MAAO,OACPC,WAAY,OACZlC,KAAM,eACNqJ,KAAM,EACNC,SAAU,IACVC,UAAU,EACVpH,MAAO,SACPqH,YAAa,SACbC,eAAgB,SAACnH,GAAM,OACnB,SAACiC,EAAA,EAAgB,CACbG,iBAAkBrF,EAAKmJ,UAAUC,KAAKtD,KAAI,SAAAtE,GAAI,OAAIA,EAAK6I,IAAI,IAC3D5I,MAAOwB,EAAOoB,IAAI5C,MAClB0D,QAAS2E,EACTvK,MAAO0D,EAAO1D,MACd6F,IAAKnC,EAAOmC,IACZpE,GAAIiC,EAAOjC,IACb,GAGV,CACI4B,MAAO,UACPC,WAAY,UACZlC,KAAM,SACNqJ,KAAM,EACNE,UAAU,EACVpH,MAAO,SACPqH,YAAa,UAEjB,CACIvH,MAAO,WACPC,WAAY,WACZlC,KAAM,SACNqJ,KAAM,EACNE,UAAU,EACVpH,MAAO,SACPqH,YAAa,WAKzB,OACI,SAAC,EAAS,WACN,SAACG,EAAA,EAAG,CAAChH,GAAI,CAACwD,OAAQ,OAAQyD,MAAO,QAAQ,UACrC,SAACxK,EAAA,EAAS,CACNC,KAAMA,EACNC,KAAMA,EACNyB,QAASA,EACTxB,QAASA,EACT4J,aAAcA,EACd1I,eAAgBA,EAChB8C,YAAaA,EACb9D,iBAAkBA,EAClBD,cAAeA,EACfqK,WAAY,CACRC,QAASpD,EAAAA,EACTqD,OAAQ7B,GAEZ8B,gBAAiB,CACbC,QAAS,CACLlJ,QAAAA,EACAwC,YAAAA,EACA9C,eAAAA,EACAhB,iBAAAA,EACAJ,KAAAA,EACAE,QAAAA,IAGRoD,GAAI,gBAAEyD,EAAO,EAAPA,QAAO,OAAMnH,EAAAA,EAAAA,IAAQmH,EAAQ,OAKvD,C","sources":["helper/checkValidFields.js","components/EzMuiGrid/EzMuiGrid.js","section/table/CustomSelectCell.jsx","helper/getColumnDataToRenderNewRow.js","helper/sanitizedString.js","section/table/CustomToolBar.jsx","section/table/personal/PersonalFooter.jsx","section/table/personal/Personal.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nexport const checkValidFields = (obj) => {\r\n    for (let key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = obj[key];\r\n            if (!['date', 'id', 'dollarsPerHour'].includes(key)) {\r\n                if (value === null || value === \"\" || isNaN(value)) {\r\n                    return {key, value};\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\ncheckValidFields.prototype = {\r\n    obj: PropTypes.object.isRequired\r\n}","// material\r\nimport {DataGrid, GridActionsCellItem, GridRowModes} from \"@mui/x-data-grid\";\r\nimport {checkValidFields} from \"../../helper/checkValidFields\";\r\nimport {generalSliceActions} from \"../../store/adminSlice\";\r\nimport {useCallback, useMemo} from \"react\";\r\nimport {CustomSelectCell} from \"../../section/table/CustomSelectCell\";\r\nimport EzText from \"../EzText/EzText\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport {Tooltip} from \"@mui/material\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//----------------------------------------------------------------\r\nconst tableSx = {\r\n    borderRadius: '4px',\r\n    border: '1px solid lightgrey'\r\n};\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function EzMuiGrid({\r\n    user,\r\n    rows,\r\n    columns,\r\n    rowModesModel,\r\n    setRowModesModel,\r\n    ...rest\r\n}) {\r\n    const handleRowEditStart = (params, event) => event.defaultMuiPrevented = true;\r\n    const handleRowEditStop = (params, event) => event.defaultMuiPrevented = true;\r\n\r\n    const handleProcessRowUpdateError = useCallback((error) => {\r\n        window.displayNotification({type: error.type, content: error.content})\r\n        console.log(error)\r\n    }, []);\r\n\r\n    const handleEditClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.Edit}})\r\n    }, [rowModesModel]);\r\n\r\n    const handleSaveClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View}})\r\n        rest.setIsAddActive(false)\r\n    }, [rowModesModel]);\r\n\r\n    const handleCancelClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View, ignoreModifications: true}});\r\n\r\n        const editedRow = rows.find(item => item.id === id);\r\n        if (editedRow.isNew) {\r\n            rest.setRows(prev => prev.filter(item => item.id !== id))\r\n        }\r\n        rest.setIsAddActive(false)\r\n    }, [rowModesModel]);\r\n\r\n    const processRowUpdate = useCallback(\r\n        async (newRow, oldRow) => {\r\n            await new Promise((resolve, reject) => {\r\n                //check empty field\r\n                // const today = new Date();\r\n                // const newDate = new Date(newRow.date)\r\n                // if (newDate <= today) {\r\n                //     return reject({type: 'error', content: 'Date has to be greater than today'});\r\n                // }\r\n                const value = checkValidFields(newRow)\r\n                if (value !== true) {\r\n                    return reject({type: 'error', content: `${value.key} can't be ${value.value}`});\r\n                }\r\n                resolve()\r\n            })\r\n            if (JSON.stringify(newRow) === JSON.stringify(oldRow)) {\r\n                window.displayNotification({\r\n                    type: 'warning',\r\n                    content: 'Row not saved, cells are empty or no data was changed'\r\n                })\r\n                return oldRow\r\n            } else {\r\n                if(newRow.isNew) {\r\n                    const {isNew, ...rest} = newRow;\r\n                    window.dispatch(generalSliceActions.createNewRecordInUserTable({\r\n                        newR: {...rest},\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row saved successfully!!'\r\n                    })\r\n                    return rest\r\n                } else {\r\n                    window.dispatch(generalSliceActions.updateUserTable({\r\n                        newRow,\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row edited successfully!!'\r\n                    })\r\n                    return newRow\r\n                }\r\n            }\r\n        }, []\r\n    );\r\n\r\n    const allProductsVariantsGridColumns = useMemo(\r\n        () => [\r\n            ...columns,\r\n            {\r\n                field: 'action',\r\n                headerName: 'Action',\r\n                align: 'center',\r\n                type: 'actions',\r\n                sortable: false,\r\n                getActions: (params) => {\r\n                    const isInEditMode = rowModesModel[params.id]?.mode === GridRowModes.Edit;\r\n                    if (isInEditMode) {\r\n                        return [\r\n                            <GridActionsCellItem\r\n                                icon={<SaveIcon sx={{fill: 'green'}}/>}\r\n                                label='Save'\r\n                                onClick={_ => {\r\n                                    rest.setIsAddActive(false);\r\n                                    handleSaveClick(params.id)\r\n                                }}\r\n                            />,\r\n                            <GridActionsCellItem\r\n                                icon={<CancelIcon sx={{fill: 'red'}}/>}\r\n                                label='Cancel'\r\n                                className='textPrimary'\r\n                                onClick={_ => {\r\n                                    rest.setIsAddActive(false);\r\n                                    handleCancelClick(params.id)\r\n                                }}\r\n                                color='inherit'\r\n                            />,\r\n                        ];\r\n                    }\r\n                    return [\r\n                        <Tooltip title='Edit'>\r\n                            <GridActionsCellItem\r\n                                icon={<EditIcon sx={{fill: 'white'}}/>}\r\n                                label='Edit'\r\n                                disabled={isInEditMode === true || rest.isAddActive}\r\n                                onClick={_ => {\r\n                                    rest.setIsAddActive(true);\r\n                                    handleEditClick(params.id)\r\n                                }}\r\n                            />\r\n                        </Tooltip>\r\n                    ]\r\n                },\r\n            }\r\n        ], [rowModesModel, handleSaveClick, handleCancelClick, handleEditClick, rest.isAddActive])\r\n\r\n\r\n    return (\r\n        <DataGrid\r\n            sx={tableSx}\r\n            rows={rows}\r\n            columns={allProductsVariantsGridColumns}\r\n            getRowId={row => row.id}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10, 20]}\r\n            //to edit function in v5 editMode and experimentalFeatures are required\r\n            editMode='row'\r\n            onRowEditStart={handleRowEditStart}//disable edit with dbclick\r\n            onRowEditStop={handleRowEditStop}//disable edit with dbclick\r\n            experimentalFeatures={{newEditingApi: true}}\r\n            onRowModesModelChange={model => setRowModesModel(model)}\r\n            rowModesModel={rowModesModel}\r\n            processRowUpdate={processRowUpdate}\r\n            onProcessRowUpdateError={handleProcessRowUpdateError}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nEzMuiGrid.prototype = {\r\n    user: PropTypes.object.isRequired,\r\n    rows: PropTypes.array.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    rowModesModel: PropTypes.object.isRequired,\r\n    setRowModesModel: PropTypes.func.isRequired,\r\n    rest: PropTypes.object\r\n}","import {MenuItem, Select} from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CustomSelectCell = ({id, value, options, api, daysAlreadyAdded, isNew}) => {\r\n    return (\r\n        <Select\r\n            fullWidth\r\n            value={value}\r\n            onChange={e => {\r\n                if(!daysAlreadyAdded.length && isNew) {\r\n                    return api.setEditCellValue({id, field: \"date\", value: e.target.value})\r\n                }\r\n                if(daysAlreadyAdded.length >= 1) {\r\n                    if(!daysAlreadyAdded.includes(e.target.value)) {\r\n                        api.setEditCellValue({id, field: \"date\", value: e.target.value})\r\n                    } else {\r\n                        window.displayNotification({\r\n                            type: 'warning',\r\n                            content: 'This day already exist'\r\n                        })\r\n                    }\r\n                }\r\n\r\n            }}\r\n            renderValue={(selected) => selected}\r\n        >\r\n            {options.map(item =>\r\n                <MenuItem key={item} value={item}>{item}</MenuItem>\r\n            )}\r\n        </Select>\r\n    );\r\n}\r\n\r\nCustomSelectCell.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    options: PropTypes.array.isRequired,\r\n    api: PropTypes.object.isRequired\r\n}","export const getColumnDataToRenderNewRow = (columns) => {\r\n    const newRow = {};\r\n    columns.forEach(column => {\r\n        switch (column.field) {\r\n            case 'date':\r\n                newRow[column.field] = ''\r\n                break;\r\n            case 'action':\r\n                break;\r\n            default:\r\n                newRow[column.field] = 0\r\n        }\r\n    })\r\n    return newRow\r\n}","export const sanitizedString = (string) => {\r\n    const sanitizedStr = string.replace(/[.,_]/g, ' ');\r\n\r\n    return sanitizedStr.replace(\r\n        /\\w\\S*/g,\r\n        function (txt) {\r\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n        }\r\n    )\r\n}","import {useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n// material\r\nimport {IconButton, Stack, Tooltip} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport {GridRowModes} from \"@mui/x-data-grid\";\r\n//\r\nimport EzText from \"../../components/EzText/EzText\";\r\nimport {createId, getActualMonthAndYear} from \"../../helper\";\r\nimport EzCustomSelect from \"../../components/EzCustomSelect/EzCustomSelect\";\r\nimport {getUserTableData} from \"../../helper/firebase/FirestoreApi\";\r\nimport {getColumnDataToRenderNewRow} from \"../../helper/getColumnDataToRenderNewRow\";\r\nimport {sanitizedString} from \"../../helper/sanitizedString\";\r\n\r\n//---------------------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    height: '60px',\r\n    border: `1px solid ${theme.palette['tableBorder']}`,\r\n    backgroundColor: theme.palette['indigoDye'],\r\n    borderRadius: '4px 4px 0 0',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: '0 10px',\r\n    justifyContent: 'space-between'\r\n}));\r\n\r\n//---------------------------------------------------------------------------------\r\n/**\r\n *\r\n * @param setRows - to manipulate table rows (add a new row in this case)\r\n * @param isAddActive - false by default, true if a new row was added and is in edit mode\r\n * @param setIsAddActive - to change the state of isAddActive\r\n * @param setRowModesModel - to be able to manipulate the new row that was just added and put it in edit mode\r\n * @param user - object that represent the user variable in store\r\n * @param columns - table columns to get the field and render dynamically the new row\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\n\r\nexport default function CustomToolBar({setRows, isAddActive, setIsAddActive, setRowModesModel, user, columns}) {\r\n    const {month} = useSelector(slice => slice.admin)\r\n    const [value, setValue] = useState(getActualMonthAndYear())\r\n    const handleAddRow = async () => {\r\n        setIsAddActive(true)\r\n        const id = createId(20);\r\n        setRows(prev => {\r\n            return [...prev, {id, ...getColumnDataToRenderNewRow(columns), isNew: true}]\r\n        });\r\n        setRowModesModel(prev => {\r\n            return {\r\n                ...prev,\r\n                [id]: {mode: GridRowModes.Edit, fieldToFocus: 'date'}\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <RootStyle>\r\n            <EzText\r\n                text={sanitizedString(user.select)}\r\n                sx={{color: 'white'}}\r\n            />\r\n\r\n            <Stack direction='row' gap='10px' alignItems='center'>\r\n                <Stack direction='row' gap='10px' alignItems='center'>\r\n                    <EzText text='Select Month'/>\r\n                    <EzCustomSelect\r\n                        disabled={isAddActive}\r\n                        option={[...month]}\r\n                        value={value}\r\n                        onChange={e => {\r\n                            setValue(e.target.value)\r\n                            window.dispatch(getUserTableData({\r\n                                uid: user.uid,\r\n                                collection: user.select,\r\n                                monthAndYear: e.target.value\r\n                            }))\r\n                        }}\r\n                        from='toolbar'\r\n                    />\r\n                </Stack>\r\n\r\n                <Tooltip title=\"Add\" placement=\"bottom\">\r\n                  <span>\r\n                    <IconButton\r\n                        disabled={isAddActive}\r\n                        onClick={handleAddRow}\r\n                    >\r\n                      <AddIcon\r\n                          sx={({palette}) => ({\r\n                              fill: isAddActive ? palette['tableBorder'] : palette['tableColor']\r\n                          })}\r\n                      />\r\n                    </IconButton>\r\n                  </span>\r\n                </Tooltip>\r\n            </Stack>\r\n        </RootStyle>\r\n    )\r\n}\r\n\r\nCustomToolBar.prototype = {\r\n    setRows: PropTypes.func.isRequired,\r\n    isAddActive: PropTypes.bool.isRequired,\r\n    setIsAddActive: PropTypes.func.isRequired,\r\n    setRowModesModel: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    columns: PropTypes.array.isRequired\r\n}","// material\r\nimport {Stack} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport {GridFooterContainer, GridPagination} from \"@mui/x-data-grid\";\r\nimport EzText from \"../../../components/EzText/EzText\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n//----------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({}));\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function PersonalFooter() {\r\n    const {user} = useSelector(slice => slice.admin);\r\n    const [footerData, setFooterData] = useState({\r\n        deposit: 0,\r\n        expenses: 0\r\n    });\r\n\r\n    useEffect(() => {\r\n        const { deposit, expenses } = user?.tableData?.data.reduce(\r\n            (acc, curr) => {\r\n                const { deposit, expenses} = curr;\r\n                acc.deposit += deposit;\r\n                acc.expenses += expenses;\r\n                return acc;\r\n            },\r\n            { deposit: 0, expenses: 0 }\r\n        );\r\n        setFooterData({ deposit, expenses });\r\n    }, [user.tableData.data]);\r\n\r\n    const { deposit, expenses } = footerData;\r\n    return (\r\n        <GridFooterContainer>\r\n            <Stack direction='row' alignItems='center' p='0 0 0 20px' gap='20px'>\r\n                <EzText text={`Earn: $${deposit.toFixed(2)}`} sx={{color: '#e9c46a'}}/>\r\n                <EzText text={`Expenses: $${expenses.toFixed(2)}`} sx={{color: '#e63946'}}/>\r\n                <EzText text={`Total: $${(deposit - expenses).toFixed(2)}`} sx={{color: '#2a9d8f'}}/>\r\n                <EzText text={`Days: ${(user?.tableData?.data.length)}`} sx={{color: '#2a9d99'}}/>\r\n            </Stack>\r\n            <GridPagination />\r\n        </GridFooterContainer>\r\n    );\r\n}\r\n","import {useSelector} from \"react-redux\";\r\nimport {useCallback, useEffect, useMemo, useState} from \"react\";\r\n// material\r\nimport {Box, Stack, Tooltip} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport {GridActionsCellItem, GridRowModes} from \"@mui/x-data-grid\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n//\r\nimport EzMuiGrid from \"../../../components/EzMuiGrid/EzMuiGrid\";\r\nimport {monthDays} from \"../../../helper\";\r\nimport {CustomSelectCell} from \"../CustomSelectCell\";\r\nimport PersonalFooter from \"./PersonalFooter\";\r\nimport {tableSx} from \"../../../helper/Style\";\r\nimport CustomToolBar from \"../CustomToolBar\";\r\n\r\n//----------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    margin: '10px',\r\n    height: 'calc(100vh - 80px)'\r\n}));\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function Personal() {\r\n    const {user} = useSelector(slice => slice.admin);\r\n    const [rows, setRows] = useState([]);\r\n    const daysToRender = useMemo(() => monthDays(user.tableData.id), [user.tableData.id])\r\n    const [rowModesModel, setRowModesModel] = useState({});\r\n    const [isAddActive, setIsAddActive] = useState(false);\r\n\r\n    useEffect(_ => {\r\n        setRows(user.tableData.data)\r\n    }, [user.tableData.id, user.tableData.data]);\r\n\r\n    const columns = [\r\n            {\r\n                field: 'date',\r\n                headerName: 'date',\r\n                type: 'singleSelect',\r\n                flex: 1,\r\n                minWidth: 180,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderEditCell: (params) => (\r\n                    <CustomSelectCell\r\n                        daysAlreadyAdded={user.tableData.data.map(item => item.date)}\r\n                        isNew={params.row.isNew}\r\n                        options={daysToRender}\r\n                        value={params.value}\r\n                        api={params.api}\r\n                        id={params.id}\r\n                    />\r\n                ),\r\n            },\r\n            {\r\n                field: 'deposit',\r\n                headerName: 'deposit',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'expenses',\r\n                headerName: 'expenses',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            }\r\n        ]\r\n\r\n\r\n    return (\r\n        <RootStyle>\r\n            <Box sx={{height: '100%', width: '100%'}}>\r\n                <EzMuiGrid\r\n                    user={user}\r\n                    rows={rows}\r\n                    setRows={setRows}\r\n                    columns={columns}\r\n                    daysToRender={daysToRender}\r\n                    setIsAddActive={setIsAddActive}\r\n                    isAddActive={isAddActive}\r\n                    setRowModesModel={setRowModesModel}\r\n                    rowModesModel={rowModesModel}\r\n                    components={{\r\n                        Toolbar: CustomToolBar,\r\n                        Footer: PersonalFooter\r\n                    }}\r\n                    componentsProps={{\r\n                        toolbar: {\r\n                            setRows,\r\n                            isAddActive,\r\n                            setIsAddActive,\r\n                            setRowModesModel,\r\n                            user,\r\n                            columns\r\n                        },\r\n                    }}\r\n                    sx={({palette}) => tableSx(palette)}\r\n                />\r\n            </Box>\r\n        </RootStyle>\r\n    );\r\n};"],"names":["checkValidFields","obj","key","hasOwnProperty","value","includes","isNaN","prototype","PropTypes","tableSx","borderRadius","border","EzMuiGrid","user","rows","columns","rowModesModel","setRowModesModel","rest","handleProcessRowUpdateError","useCallback","error","window","displayNotification","type","content","console","log","handleEditClick","id","mode","GridRowModes","handleSaveClick","setIsAddActive","handleCancelClick","ignoreModifications","find","item","isNew","setRows","prev","filter","processRowUpdate","newRow","oldRow","Promise","resolve","reject","JSON","stringify","dispatch","generalSliceActions","newR","collection","select","allProductsVariantsGridColumns","useMemo","field","headerName","align","sortable","getActions","params","isInEditMode","GridActionsCellItem","icon","Save","sx","fill","label","onClick","_","Cancel","className","color","Tooltip","title","Edit","disabled","isAddActive","DataGrid","getRowId","row","pageSize","rowsPerPageOptions","editMode","onRowEditStart","event","defaultMuiPrevented","onRowEditStop","experimentalFeatures","newEditingApi","onRowModesModelChange","model","onProcessRowUpdateError","CustomSelectCell","options","api","daysAlreadyAdded","fullWidth","onChange","e","length","setEditCellValue","target","renderValue","selected","map","getColumnDataToRenderNewRow","forEach","column","sanitizedString","string","replace","txt","charAt","toUpperCase","substr","toLowerCase","RootStyle","styled","Stack","theme","height","palette","backgroundColor","flexDirection","alignItems","padding","justifyContent","CustomToolBar","month","useSelector","slice","admin","useState","getActualMonthAndYear","setValue","handleAddRow","createId","fieldToFocus","EzText","text","direction","gap","EzCustomSelect","option","getUserTableData","uid","monthAndYear","from","placement","IconButton","Add","PersonalFooter","deposit","expenses","footerData","setFooterData","useEffect","tableData","data","reduce","acc","curr","GridFooterContainer","p","toFixed","GridPagination","margin","Personal","daysToRender","monthDays","flex","minWidth","editable","headerAlign","renderEditCell","date","Box","width","components","Toolbar","Footer","componentsProps","toolbar"],"sourceRoot":""}