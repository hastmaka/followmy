{"version":3,"file":"static/js/931.69006b2c.chunk.js","mappings":"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","sources":["components/EzMuiGrid/EzMuiGrid.js","helper/checkValidFields.js","section/table/CustomSelectCell.jsx","section/table/personal/ToolBar.jsx","section/table/personal/Personal.jsx"],"sourcesContent":["// material\r\nimport {DataGrid} from \"@mui/x-data-grid\";\r\n\r\n//----------------------------------------------------------------\r\nconst tableSx = {\r\n    borderRadius: '4px',\r\n    border: '1px solid lightgrey'\r\n};\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function EzMuiGrid({\r\n    rows,\r\n    columns,\r\n    setOpen,\r\n    GridContainerSx,\r\n    rowModesModel,\r\n    setRowModesModel,\r\n    processRowUpdate,\r\n    handleProcessRowUpdateError,\r\n    ...rest\r\n}) {\r\n    const handleRowEditStart = (params, event) => event.defaultMuiPrevented = true;\r\n    const handleRowEditStop = (params, event) => event.defaultMuiPrevented = true;\r\n\r\n\r\n    return (\r\n        <DataGrid\r\n            sx={tableSx}\r\n            rows={rows}\r\n            columns={columns}\r\n            getRowId={row => row.id}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10, 20]}\r\n            //to edit function in v5 editMode and experimentalFeatures are required\r\n            editMode='row'\r\n            onRowEditStart={handleRowEditStart}//disable edit with dbclick\r\n            onRowEditStop={handleRowEditStop}//disable edit with dbclick\r\n            experimentalFeatures={{newEditingApi: true}}\r\n            onRowModesModelChange={model => setRowModesModel(model)}\r\n            rowModesModel={rowModesModel}\r\n            processRowUpdate={processRowUpdate}\r\n            onProcessRowUpdateError={handleProcessRowUpdateError}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport const checkValidFields = (obj) => {\r\n    for (let key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = obj[key];\r\n            if (!['date', 'id', 'dollarsPerHour'].includes(key)) {\r\n                if (value === null || value === \"\" || isNaN(value)) {\r\n                    return {key, value};\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\ncheckValidFields.prototype = {\r\n    obj: PropTypes.object.isRequired\r\n}","import {MenuItem, Select} from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CustomSelectCell = ({id, value, options, api}) => {\r\n    return (\r\n        <Select\r\n            fullWidth\r\n            value={value}\r\n            onChange={e => api.setEditCellValue({id, field: \"date\", value: e.target.value})}\r\n            renderValue={(selected) => selected}\r\n        >\r\n            {options.map(item =>\r\n                <MenuItem key={item} value={item}>{item}</MenuItem>\r\n            )}\r\n        </Select>\r\n    );\r\n}\r\n\r\nCustomSelectCell.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    options: PropTypes.array.isRequired,\r\n    api: PropTypes.object.isRequired\r\n}","import {useSelector} from \"react-redux\";\r\n// material\r\nimport {IconButton, Stack, Tooltip} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport {GridRowModes} from \"@mui/x-data-grid\";\r\n//\r\nimport EzText from \"../../../components/EzText/EzText\";\r\nimport {createId, getActualMonthAndYear} from \"../../../helper\";\r\nimport EzCustomSelect from \"../../../components/EzCustomSelect/EzCustomSelect\";\r\nimport {getUserTableData} from \"../../../helper/firebase/FirestoreApi\";\r\nimport {useState} from \"react\";\r\n\r\n//---------------------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    height: '60px',\r\n    border: `1px solid ${theme.palette['tableBorder']}`,\r\n    backgroundColor: theme.palette['indigoDye'],\r\n    borderRadius: '4px 4px 0 0',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: '0 10px',\r\n    justifyContent: 'space-between'\r\n}));\r\n\r\n//---------------------------------------------------------------------------------\r\n\r\nexport default function Toolbar({setRows, isAdd, setIsAdd, setRowModesModel, user}) {\r\n    const {month} = useSelector(slice => slice.admin)\r\n    const [value, setValue] = useState(getActualMonthAndYear())\r\n    const handleAddRow = async () => {\r\n        setIsAdd(true)\r\n        const id = createId(20);\r\n        setRows(prev => {\r\n            return [...prev, {\r\n                id,\r\n                // date: !user.tableData?.data?.length ?\r\n                //     new Date().toLocaleDateString().split('/')[1].toString().padStart(2, '0') :\r\n                //     (Math.max(...user.tableData.data.map(item => item.date)) + 1).toString().padStart(2, '0'),\r\n                date: '',\r\n                uber: 0,\r\n                lyft: 0,\r\n                other: 0,\r\n                hours: 0,\r\n                miles: 0,\r\n                gas: 0,\r\n                expenses: 0,\r\n                isNew: true\r\n            }]\r\n        });\r\n        setRowModesModel(prev => {\r\n            return {\r\n                ...prev,\r\n                [id]: {mode: GridRowModes.Edit, fieldToFocus: 'date'}\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <RootStyle>\r\n            <EzText\r\n                text={user.select === 'uber_and_lyft' ? 'Uber and Lyft' : 'Personal'}\r\n                sx={{color: 'white'}}\r\n            />\r\n\r\n            <Stack direction='row' gap='10px' alignItems='center'>\r\n                <Stack direction='row' gap='10px' alignItems='center'>\r\n                    <EzText text='Select Month'/>\r\n                    <EzCustomSelect\r\n                        option={[...month]}\r\n                        value={value}\r\n                        onChange={e => {\r\n                            setValue(e.target.value)\r\n                            window.dispatch(getUserTableData({\r\n                                uid: user.uid,\r\n                                collection: user.select,\r\n                                monthAndYear: e.target.value\r\n                            }))\r\n                        }}\r\n                        from='toolbar'\r\n                    />\r\n                </Stack>\r\n\r\n                <Tooltip title=\"Add\" placement=\"bottom\">\r\n                  <span>\r\n                    <IconButton\r\n                        disabled={isAdd}\r\n                        onClick={handleAddRow}\r\n                    >\r\n                      <AddIcon\r\n                          sx={({palette}) => ({\r\n                              fill: isAdd ? palette['tableBorder'] : palette['tableColor']\r\n                          })}\r\n                      />\r\n                    </IconButton>\r\n                  </span>\r\n                </Tooltip>\r\n            </Stack>\r\n        </RootStyle>\r\n    )\r\n}","// material\r\nimport {Box, Stack, Tooltip} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport EzMuiGrid from \"../../../components/EzMuiGrid/EzMuiGrid\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {monthDays} from \"../../../helper\";\r\nimport {useCallback, useMemo, useState} from \"react\";\r\nimport {CustomSelectCell} from \"../CustomSelectCell\";\r\nimport EzText from \"../../../components/EzText/EzText\";\r\nimport {GridActionsCellItem, GridRowModes} from \"@mui/x-data-grid\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Toolbar from \"../personal/ToolBar\";\r\nimport {tableSx} from \"../../../helper/Style\";\r\nimport {checkValidFields} from \"../../../helper/checkValidFields\";\r\nimport {generalSliceActions} from \"../../../store/adminSlice\";\r\n\r\n//----------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    margin: '10px',\r\n    height: 'calc(100vh - 80px)'\r\n}));\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function Personal() {\r\n    const {user} = useSelector(slice => slice.admin);\r\n    const [rows, setRows] = useState([]);\r\n    const daysToRender = useMemo(() => monthDays(user.tableData.id), [user.tableData.id])\r\n    const [rowModesModel, setRowModesModel] = useState({});\r\n    const [isAdd, setIsAdd] = useState(false);\r\n\r\n    const handleEditClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.Edit}})\r\n    }, [rowModesModel]);\r\n\r\n    const handleSaveClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View}})\r\n        setIsAdd(false)\r\n    }, [rowModesModel]);\r\n\r\n    const handleCancelClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View, ignoreModifications: true}});\r\n\r\n        const editedRow = rows.find(item => item.id === id);\r\n        if (editedRow.isNew) {\r\n            setRows(prev => prev.filter(item => item.id !== id))\r\n        }\r\n        setIsAdd(false)\r\n    }, [rowModesModel]);\r\n\r\n    const handleProcessRowUpdateError = useCallback((error) => {\r\n        window.displayNotification({type: error.type, content: error.content})\r\n        console.log(error)\r\n    }, []);\r\n\r\n    const processRowUpdate = useCallback(\r\n        async (newRow, oldRow) => {\r\n            await new Promise((resolve, reject) => {\r\n                //check empty field\r\n                // const today = new Date();\r\n                // const newDate = new Date(newRow.date)\r\n                // if (newDate <= today) {\r\n                //     return reject({type: 'error', content: 'Date has to be greater than today'});\r\n                // }\r\n                const value = checkValidFields(newRow)\r\n                if (value !== true) {\r\n                    return reject({type: 'error', content: `${value.key} can't be ${value.value}`});\r\n                }\r\n                resolve()\r\n            })\r\n            if (JSON.stringify(newRow) === JSON.stringify(oldRow)) {\r\n                window.displayNotification({\r\n                    type: 'warning',\r\n                    content: 'Row not saved, cells are empty'\r\n                })\r\n                return oldRow\r\n            } else {\r\n                if(newRow.isNew) {\r\n                    const {isNew, ...rest} = newRow;\r\n                    window.dispatch(generalSliceActions.createNewRecordInUserTable({\r\n                        newR: {...rest},\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row saved successfully!!'\r\n                    })\r\n                    return rest\r\n                } else {\r\n                    window.dispatch(generalSliceActions.updateUserTable({\r\n                        newRow,\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row edited successfully!!'\r\n                    })\r\n                    return newRow\r\n                }\r\n            }\r\n        }, []\r\n    );\r\n\r\n    const allProductsVariantsGridColumns = useMemo(\r\n        () => [\r\n            {\r\n                field: 'date',\r\n                headerName: 'date',\r\n                type: 'singleSelect',\r\n                flex: 1,\r\n                minWidth: 180,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderEditCell: (params) => (\r\n                    <CustomSelectCell\r\n                        options={daysToRender}\r\n                        value={params.value}\r\n                        api={params.api}\r\n                        id={params.id}\r\n                    />\r\n                ),\r\n            },\r\n            {\r\n                field: 'uber',\r\n                headerName: 'uber',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'lyft',\r\n                headerName: 'lyft',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'other',\r\n                headerName: 'other',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'hours',\r\n                headerName: 'hours',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'gas',\r\n                headerName: 'gas',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'expenses',\r\n                headerName: 'expenses',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'miles',\r\n                headerName: 'miles',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderCell: (params) => {\r\n                    return <EzText text={`${params.row.miles} / $${params.row.miles * 0.08}`}/>\r\n                }\r\n            },\r\n            {\r\n                field: 'dollarsPerHour',\r\n                headerName: '$/hr',\r\n                type: 'number',\r\n                flex: 1,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderCell: (params) => {\r\n                    const {uber, lyft, other, hours, miles, gas, expenses} = params.row;\r\n                    const real = (uber + lyft + other - gas - expenses - miles * 0.08) / hours\r\n                    return <EzText text={`${real.toFixed(2)} / hr`}/>\r\n                }\r\n            },\r\n            {\r\n                field: 'action',\r\n                headerName: 'Action',\r\n                align: 'center',\r\n                type: 'actions',\r\n                sortable: false,\r\n                getActions: (params) => {\r\n                    const isInEditMode = rowModesModel[params.id]?.mode === GridRowModes.Edit;\r\n                    if (isInEditMode) {\r\n                        return [\r\n                            <GridActionsCellItem\r\n                                icon={<SaveIcon sx={{fill: 'green'}}/>}\r\n                                label=\"Save\"\r\n                                onClick={_ => handleSaveClick(params.id)}\r\n                            />,\r\n                            <GridActionsCellItem\r\n                                icon={<CancelIcon sx={{fill: 'red'}}/>}\r\n                                label=\"Cancel\"\r\n                                className=\"textPrimary\"\r\n                                onClick={_ => handleCancelClick(params.id)}\r\n                                color=\"inherit\"\r\n                            />,\r\n                        ];\r\n                    }\r\n                    return [\r\n                        <Tooltip title=\"Edit\">\r\n                            <GridActionsCellItem\r\n                                icon={<EditIcon sx={{fill: 'white'}}/>}\r\n                                label=\"Edit\"\r\n                                disabled={isInEditMode === true}\r\n                                onClick={_ => handleEditClick(params.id)}\r\n                                // showInMenu\r\n                            />\r\n                        </Tooltip>\r\n                    ]\r\n                },\r\n            }\r\n        ], [rowModesModel, handleSaveClick, handleCancelClick, handleEditClick])\r\n\r\n\r\n    return (\r\n        <RootStyle>\r\n            <Box sx={{height: '100%', width: '100%'}}>\r\n                <EzMuiGrid\r\n                    rows={rows}\r\n                    columns={allProductsVariantsGridColumns}\r\n                    processRowUpdate={processRowUpdate}\r\n                    onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                    setRowModesModel={setRowModesModel}\r\n                    rowModesModel={rowModesModel}\r\n                    components={{\r\n                        Toolbar: Toolbar\r\n                    }}\r\n                    componentsProps={{\r\n                        toolbar: {\r\n                            setRows,\r\n                            isAdd,\r\n                            setIsAdd,\r\n                            setRowModesModel,\r\n                            user\r\n                        },\r\n                    }}\r\n                    sx={({palette}) => tableSx(palette)}\r\n                />\r\n            </Box>\r\n        </RootStyle>\r\n    );\r\n}"],"names":["tableSx","borderRadius","border","EzMuiGrid","rows","columns","rowModesModel","setOpen","GridContainerSx","setRowModesModel","processRowUpdate","handleProcessRowUpdateError","rest","sx","getRowId","row","id","pageSize","rowsPerPageOptions","editMode","onRowEditStart","params","event","defaultMuiPrevented","onRowEditStop","experimentalFeatures","newEditingApi","onRowModesModelChange","model","onProcessRowUpdateError","checkValidFields","obj","key","hasOwnProperty","value","includes","isNaN","prototype","PropTypes","CustomSelectCell","options","api","fullWidth","onChange","e","setEditCellValue","field","target","renderValue","selected","map","item","RootStyle","styled","Stack","theme","height","palette","backgroundColor","flexDirection","alignItems","padding","justifyContent","Toolbar","setRows","isAdd","setIsAdd","user","month","useSelector","slice","admin","useState","getActualMonthAndYear","setValue","handleAddRow","createId","prev","date","uber","lyft","other","hours","miles","gas","expenses","isNew","mode","GridRowModes","fieldToFocus","EzText","text","select","color","direction","gap","EzCustomSelect","option","window","dispatch","getUserTableData","uid","collection","monthAndYear","from","Tooltip","title","placement","IconButton","disabled","onClick","Add","fill","margin","Personal","daysToRender","useMemo","monthDays","tableData","handleEditClick","useCallback","handleSaveClick","handleCancelClick","ignoreModifications","find","filter","error","displayNotification","type","content","console","log","newRow","oldRow","Promise","resolve","reject","JSON","stringify","generalSliceActions","newR","allProductsVariantsGridColumns","headerName","flex","minWidth","editable","align","headerAlign","renderEditCell","renderCell","real","toFixed","sortable","getActions","isInEditMode","GridActionsCellItem","icon","Save","label","_","Cancel","className","Edit","Box","width","components","componentsProps","toolbar"],"sourceRoot":""}