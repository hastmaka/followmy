{"version":3,"file":"static/js/640.b494f975.chunk.js","mappings":"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","sources":["helper/checkValidFields.js","components/EzMuiGrid/EzMuiGrid.js","section/table/CustomSelectCell.jsx","helper/getColumnDataToRenderNewRow.js","helper/sanitizedString.js","section/table/CustomToolBar.jsx","section/table/uberAndLyft/UberAndLyftFooter.jsx","section/table/uberAndLyft/UberAndLyft.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nexport const checkValidFields = (obj) => {\r\n    for (let key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = obj[key];\r\n            if (!['date', 'id', 'dollarsPerHour'].includes(key)) {\r\n                if (value === null || value === \"\" || isNaN(value)) {\r\n                    return {key, value};\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\ncheckValidFields.prototype = {\r\n    obj: PropTypes.object.isRequired\r\n}","// material\r\nimport {DataGrid} from \"@mui/x-data-grid\";\r\nimport {checkValidFields} from \"../../helper/checkValidFields\";\r\nimport {generalSliceActions} from \"../../store/adminSlice\";\r\nimport {useCallback} from \"react\";\r\n\r\n//----------------------------------------------------------------\r\nconst tableSx = {\r\n    borderRadius: '4px',\r\n    border: '1px solid lightgrey'\r\n};\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function EzMuiGrid({\r\n    user,\r\n    rows,\r\n    columns,\r\n    setOpen,\r\n    GridContainerSx,\r\n    rowModesModel,\r\n    setRowModesModel,\r\n    ...rest\r\n}) {\r\n    const handleRowEditStart = (params, event) => event.defaultMuiPrevented = true;\r\n    const handleRowEditStop = (params, event) => event.defaultMuiPrevented = true;\r\n\r\n    const handleProcessRowUpdateError = useCallback((error) => {\r\n        window.displayNotification({type: error.type, content: error.content})\r\n        console.log(error)\r\n    }, []);\r\n\r\n    const processRowUpdate = useCallback(\r\n        async (newRow, oldRow) => {\r\n            await new Promise((resolve, reject) => {\r\n                //check empty field\r\n                // const today = new Date();\r\n                // const newDate = new Date(newRow.date)\r\n                // if (newDate <= today) {\r\n                //     return reject({type: 'error', content: 'Date has to be greater than today'});\r\n                // }\r\n                const value = checkValidFields(newRow)\r\n                if (value !== true) {\r\n                    return reject({type: 'error', content: `${value.key} can't be ${value.value}`});\r\n                }\r\n                resolve()\r\n            })\r\n            if (JSON.stringify(newRow) === JSON.stringify(oldRow)) {\r\n                window.displayNotification({\r\n                    type: 'warning',\r\n                    content: 'Row not saved, cells are empty'\r\n                })\r\n                return oldRow\r\n            } else {\r\n                if(newRow.isNew) {\r\n                    const {isNew, ...rest} = newRow;\r\n                    window.dispatch(generalSliceActions.createNewRecordInUserTable({\r\n                        newR: {...rest},\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row saved successfully!!'\r\n                    })\r\n                    return rest\r\n                } else {\r\n                    window.dispatch(generalSliceActions.updateUserTable({\r\n                        newRow,\r\n                        collection: user.select\r\n                    }))\r\n                    window.displayNotification({\r\n                        type: 'success',\r\n                        content: 'Row edited successfully!!'\r\n                    })\r\n                    return newRow\r\n                }\r\n            }\r\n        }, []\r\n    );\r\n\r\n\r\n    return (\r\n        <DataGrid\r\n            sx={tableSx}\r\n            rows={rows}\r\n            columns={columns}\r\n            getRowId={row => row.id}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10, 20]}\r\n            //to edit function in v5 editMode and experimentalFeatures are required\r\n            editMode='row'\r\n            onRowEditStart={handleRowEditStart}//disable edit with dbclick\r\n            onRowEditStop={handleRowEditStop}//disable edit with dbclick\r\n            experimentalFeatures={{newEditingApi: true}}\r\n            onRowModesModelChange={model => setRowModesModel(model)}\r\n            rowModesModel={rowModesModel}\r\n            processRowUpdate={processRowUpdate}\r\n            onProcessRowUpdateError={handleProcessRowUpdateError}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n","import {MenuItem, Select} from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CustomSelectCell = ({id, value, options, api}) => {\r\n    return (\r\n        <Select\r\n            fullWidth\r\n            value={value}\r\n            onChange={e => api.setEditCellValue({id, field: \"date\", value: e.target.value})}\r\n            renderValue={(selected) => selected}\r\n        >\r\n            {options.map(item =>\r\n                <MenuItem key={item} value={item}>{item}</MenuItem>\r\n            )}\r\n        </Select>\r\n    );\r\n}\r\n\r\nCustomSelectCell.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    options: PropTypes.array.isRequired,\r\n    api: PropTypes.object.isRequired\r\n}","export const getColumnDataToRenderNewRow = (columns) => {\r\n    const newRow = {};\r\n    columns.forEach(column => {\r\n        switch (column.field) {\r\n            case 'date':\r\n                newRow[column.field] = ''\r\n                break;\r\n            case 'action':\r\n                break;\r\n            default:\r\n                newRow[column.field] = 0\r\n        }\r\n    })\r\n    return newRow\r\n}","export const sanitizedString = (string) => {\r\n    const sanitizedStr = string.replace(/[.,_]/g, ' ');\r\n\r\n    return sanitizedStr.replace(\r\n        /\\w\\S*/g,\r\n        function (txt) {\r\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n        }\r\n    )\r\n}","import {useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n// material\r\nimport {IconButton, Stack, Tooltip} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport {GridRowModes} from \"@mui/x-data-grid\";\r\n//\r\nimport EzText from \"../../components/EzText/EzText\";\r\nimport {createId, getActualMonthAndYear} from \"../../helper\";\r\nimport EzCustomSelect from \"../../components/EzCustomSelect/EzCustomSelect\";\r\nimport {getUserTableData} from \"../../helper/firebase/FirestoreApi\";\r\nimport PropTypes from \"prop-types\";\r\nimport {getColumnDataToRenderNewRow} from \"../../helper/getColumnDataToRenderNewRow\";\r\nimport {sanitizedString} from \"../../helper/sanitizedString\";\r\n\r\n//---------------------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    height: '60px',\r\n    border: `1px solid ${theme.palette['tableBorder']}`,\r\n    backgroundColor: theme.palette['indigoDye'],\r\n    borderRadius: '4px 4px 0 0',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: '0 10px',\r\n    justifyContent: 'space-between'\r\n}));\r\n\r\n//---------------------------------------------------------------------------------\r\n/**\r\n *\r\n * @param setRows - to manipulate table rows (add a new row in this case)\r\n * @param isAddActive - false by default, true if a new row was added and is in edit mode\r\n * @param setIsAddActive - to change the state of isAddActive\r\n * @param setRowModesModel - to be able to manipulate the new row that was just added and put it in edit mode\r\n * @param user - object that represent the user variable in store\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\n\r\nexport default function CustomToolBar({setRows, isAddActive, setIsAddActive, setRowModesModel, user, columns}) {\r\n    const {month} = useSelector(slice => slice.admin)\r\n    const [value, setValue] = useState(getActualMonthAndYear())\r\n    const handleAddRow = async () => {\r\n        setIsAddActive(true)\r\n        const id = createId(20);\r\n        setRows(prev => {\r\n            return [...prev, {\r\n                id,\r\n                ...getColumnDataToRenderNewRow(columns),\r\n                isNew: true\r\n            }]\r\n        });\r\n        setRowModesModel(prev => {\r\n            return {\r\n                ...prev,\r\n                [id]: {mode: GridRowModes.Edit, fieldToFocus: 'date'}\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <RootStyle>\r\n            <EzText\r\n                text={sanitizedString(user.select)}\r\n                sx={{color: 'white'}}\r\n            />\r\n\r\n            <Stack direction='row' gap='10px' alignItems='center'>\r\n                <Stack direction='row' gap='10px' alignItems='center'>\r\n                    <EzText text='Select Month'/>\r\n                    <EzCustomSelect\r\n                        option={[...month]}\r\n                        value={value}\r\n                        onChange={e => {\r\n                            setValue(e.target.value)\r\n                            window.dispatch(getUserTableData({\r\n                                uid: user.uid,\r\n                                collection: user.select,\r\n                                monthAndYear: e.target.value\r\n                            }))\r\n                        }}\r\n                        from='toolbar'\r\n                    />\r\n                </Stack>\r\n\r\n                <Tooltip title=\"Add\" placement=\"bottom\">\r\n                  <span>\r\n                    <IconButton\r\n                        disabled={isAddActive}\r\n                        onClick={handleAddRow}\r\n                    >\r\n                      <AddIcon\r\n                          sx={({palette}) => ({\r\n                              fill: isAddActive ? palette['tableBorder'] : palette['tableColor']\r\n                          })}\r\n                      />\r\n                    </IconButton>\r\n                  </span>\r\n                </Tooltip>\r\n            </Stack>\r\n        </RootStyle>\r\n    )\r\n}\r\n\r\nCustomToolBar.prototype = {\r\n    setRows: PropTypes.func.isRequired,\r\n    isAddActive: PropTypes.bool.isRequired,\r\n    setIsAddActive: PropTypes.func.isRequired,\r\n    setRowModesModel: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired\r\n}","// material\r\nimport {Stack} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport {GridFooterContainer, GridPagination} from \"@mui/x-data-grid\";\r\nimport EzText from \"../../../components/EzText/EzText\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n//----------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({}));\r\n\r\n//----------------------------------------------------------------\r\n\r\nexport default function UberAndLyftFooter() {\r\n    const {user} = useSelector(slice => slice.admin);\r\n    const [footerData, setFooterData] = useState({\r\n        earn: 0,\r\n        expenses: 0,\r\n        hours: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const { earn, expenses, hours } = user?.tableData?.data.reduce(\r\n            (acc, curr) => {\r\n                const { uber, lyft, other, gas, expenses, miles, hours } = curr;\r\n                acc.earn += uber + lyft + other;\r\n                acc.expenses += gas + expenses + miles * 0.08;\r\n                acc.hours += hours;\r\n                return acc;\r\n            },\r\n            { earn: 0, expenses: 0, hours: 0 }\r\n        );\r\n        setFooterData({ earn, expenses, hours });\r\n    }, [user.tableData.data]);\r\n\r\n    const { earn, expenses, hours } = footerData;\r\n    return (\r\n        <GridFooterContainer>\r\n            <Stack direction='row' alignItems='center' p='0 0 0 20px' gap='20px'>\r\n                <EzText text={`Earn: $${earn.toFixed(2)}`} sx={{color: '#e9c46a'}}/>\r\n                <EzText text={`Expenses: $${expenses.toFixed(2)}`} sx={{color: '#e63946'}}/>\r\n                <EzText text={`Total: $${(earn - expenses).toFixed(2)}`} sx={{color: '#2a9d8f'}}/>\r\n                <EzText text={`Hours: ${(hours).toFixed(2)}`} sx={{color: '#2a6d9d'}}/>\r\n                <EzText text={`Days: ${(user?.tableData?.data.length)}`} sx={{color: '#2a9d99'}}/>\r\n            </Stack>\r\n            <GridPagination />\r\n        </GridFooterContainer>\r\n    );\r\n}\r\n","import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\n// material\r\nimport {Box, Stack, Tooltip} from '@mui/material';\r\nimport {styled} from '@mui/material/styles';\r\nimport {DataGrid, GridActionsCellItem, GridRowModes} from '@mui/x-data-grid';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n//\r\nimport UberAndLyftFooter from './UberAndLyftFooter';\r\nimport EzText from '../../../components/EzText/EzText';\r\nimport {monthDays} from '../../../helper';\r\nimport {CustomSelectCell} from '../CustomSelectCell';\r\nimport {tableSx} from '../../../helper/Style';\r\nimport EzMuiGrid from '../../../components/EzMuiGrid/EzMuiGrid';\r\nimport CustomToolBar from \"../CustomToolBar\";\r\n\r\n//-----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Stack)(({theme}) => ({\r\n    margin: '10px',\r\n    height: 'calc(100vh - 80px)'\r\n}));\r\n\r\n//-----------------------------------------------------------------------\r\nexport default function UberAndLyft() {\r\n    const {user} = useSelector(slice => slice.admin);\r\n    const [rows, setRows] = useState([]);\r\n    const daysToRender = useMemo(() => monthDays(user.tableData.id), [user.tableData.id])\r\n    const [rowModesModel, setRowModesModel] = useState({});\r\n    const [isAddActive, setIsAddActive] = useState(false);\r\n\r\n    useEffect(_ => {\r\n        setRows(user.tableData.data)\r\n    }, [user.tableData.id]);\r\n\r\n    const handleEditClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.Edit}})\r\n    }, [rowModesModel]);\r\n\r\n    const handleSaveClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View}})\r\n        setIsAddActive(false)\r\n    }, [rowModesModel]);\r\n\r\n    const handleCancelClick = useCallback((id) => {\r\n        setRowModesModel({...rowModesModel, [id]: {mode: GridRowModes.View, ignoreModifications: true}});\r\n\r\n        const editedRow = rows.find(item => item.id === id);\r\n        if (editedRow.isNew) {\r\n            setRows(prev => prev.filter(item => item.id !== id))\r\n        }\r\n        setIsAddActive(false)\r\n    }, [rowModesModel]);\r\n\r\n    const handleCellDoubleClick = (params, event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const allProductsVariantsGridColumns = useMemo(\r\n        () => [\r\n            {\r\n                field: 'date',\r\n                headerName: 'date',\r\n                type: 'singleSelect',\r\n                flex: 1,\r\n                minWidth: 180,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderEditCell: (params) => (\r\n                    <CustomSelectCell\r\n                        options={daysToRender}\r\n                        value={params.value}\r\n                        api={params.api}\r\n                        id={params.id}\r\n                    />\r\n                ),\r\n            },\r\n            {\r\n                field: 'uber',\r\n                headerName: 'uber',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'lyft',\r\n                headerName: 'lyft',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'other',\r\n                headerName: 'other',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'hours',\r\n                headerName: 'hours',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'gas',\r\n                headerName: 'gas',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'expenses',\r\n                headerName: 'expenses',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n            },\r\n            {\r\n                field: 'miles',\r\n                headerName: 'miles',\r\n                type: 'number',\r\n                flex: 1,\r\n                editable: true,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderCell: (params) => {\r\n                    return <EzText text={`${params.row.miles} / $${params.row.miles * 0.08}`}/>\r\n                }\r\n            },\r\n            {\r\n                field: 'dollarsPerHour',\r\n                headerName: '$/hr',\r\n                type: 'number',\r\n                flex: 1,\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                renderCell: (params) => {\r\n                    const {uber, lyft, other, hours, miles, gas, expenses} = params.row;\r\n                    const real = (uber + lyft + other - gas - expenses - miles * 0.08) / hours\r\n                    return <EzText text={`${real.toFixed(2)} / hr`}/>\r\n                }\r\n            },\r\n            {\r\n                field: 'action',\r\n                headerName: 'Action',\r\n                align: 'center',\r\n                type: 'actions',\r\n                sortable: false,\r\n                getActions: (params) => {\r\n                    const isInEditMode = rowModesModel[params.id]?.mode === GridRowModes.Edit;\r\n                    if (isInEditMode) {\r\n                        return [\r\n                            <GridActionsCellItem\r\n                                icon={<SaveIcon sx={{fill: 'green'}}/>}\r\n                                label='Save'\r\n                                onClick={_ => handleSaveClick(params.id)}\r\n                            />,\r\n                            <GridActionsCellItem\r\n                                icon={<CancelIcon sx={{fill: 'red'}}/>}\r\n                                label='Cancel'\r\n                                className='textPrimary'\r\n                                onClick={_ => handleCancelClick(params.id)}\r\n                                color='inherit'\r\n                            />,\r\n                        ];\r\n                    }\r\n                    return [\r\n                        <Tooltip title='Edit'>\r\n                            <GridActionsCellItem\r\n                                icon={<EditIcon sx={{fill: 'white'}}/>}\r\n                                label='Edit'\r\n                                disabled={isInEditMode === true}\r\n                                onClick={_ => handleEditClick(params.id)}\r\n                                // showInMenu\r\n                            />\r\n                        </Tooltip>\r\n                    ]\r\n                },\r\n            }\r\n        ], [rowModesModel, handleSaveClick, handleCancelClick, handleEditClick])\r\n\r\n    return (\r\n        <RootStyle>\r\n            <Box sx={{height: '100%', width: '100%'}}>\r\n                <EzMuiGrid\r\n                    user={user}\r\n                    rows={rows}\r\n                    columns={allProductsVariantsGridColumns}\r\n                    setRowModesModel={setRowModesModel}\r\n                    rowModesModel={rowModesModel}\r\n                    components={{\r\n                        Toolbar: CustomToolBar,\r\n                        Footer: UberAndLyftFooter\r\n                    }}\r\n                    componentsProps={{\r\n                        toolbar: {\r\n                            setRows,\r\n                            isAddActive,\r\n                            setIsAddActive,\r\n                            setRowModesModel,\r\n                            user,\r\n                            columns: allProductsVariantsGridColumns\r\n                        },\r\n                    }}\r\n                    disableSelectionOnClick\r\n                    sx={({palette}) => tableSx(palette)}\r\n                />\r\n            </Box>\r\n        </RootStyle>\r\n    )\r\n}"],"names":["checkValidFields","obj","key","hasOwnProperty","value","includes","isNaN","prototype","PropTypes","tableSx","borderRadius","border","EzMuiGrid","user","rows","columns","rowModesModel","setOpen","GridContainerSx","setRowModesModel","rest","handleProcessRowUpdateError","useCallback","error","window","displayNotification","type","content","console","log","processRowUpdate","newRow","oldRow","Promise","resolve","reject","JSON","stringify","isNew","dispatch","generalSliceActions","newR","collection","select","DataGrid","sx","getRowId","row","id","pageSize","rowsPerPageOptions","editMode","onRowEditStart","params","event","defaultMuiPrevented","onRowEditStop","experimentalFeatures","newEditingApi","onRowModesModelChange","model","onProcessRowUpdateError","CustomSelectCell","options","api","fullWidth","onChange","e","setEditCellValue","field","target","renderValue","selected","map","item","getColumnDataToRenderNewRow","forEach","column","sanitizedString","string","replace","txt","charAt","toUpperCase","substr","toLowerCase","RootStyle","styled","Stack","theme","height","palette","backgroundColor","flexDirection","alignItems","padding","justifyContent","CustomToolBar","setRows","isAddActive","setIsAddActive","month","useSelector","slice","admin","useState","getActualMonthAndYear","setValue","handleAddRow","createId","prev","mode","GridRowModes","fieldToFocus","EzText","text","color","direction","gap","EzCustomSelect","option","getUserTableData","uid","monthAndYear","from","Tooltip","title","placement","IconButton","disabled","onClick","Add","fill","UberAndLyftFooter","earn","expenses","hours","footerData","setFooterData","useEffect","tableData","data","reduce","acc","curr","uber","lyft","other","gas","miles","GridFooterContainer","p","toFixed","length","GridPagination","margin","UberAndLyft","daysToRender","useMemo","monthDays","_","handleEditClick","handleSaveClick","handleCancelClick","ignoreModifications","find","filter","allProductsVariantsGridColumns","headerName","flex","minWidth","editable","align","headerAlign","renderEditCell","renderCell","real","sortable","getActions","isInEditMode","GridActionsCellItem","icon","Save","label","Cancel","className","Edit","Box","width","components","Toolbar","Footer","componentsProps","toolbar","disableSelectionOnClick"],"sourceRoot":""}