{"version":3,"file":"static/js/321.18028ce7.chunk.js","mappings":"yYAYaA,EAAY,yCAAG,WAAOC,EAAOC,GAAQ,uFACjCC,EAAAA,EAAAA,IAA+BC,EAAAA,EAAMH,EAAOC,GACpDG,MAAK,SAAAC,GACF,OAAOA,EAAeC,IAC1B,IAAGC,OAAM,SAAAC,GACL,MACS,8BADDA,EAAEC,KAEKC,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,oDAGNH,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,kBAGzB,IAAE,mFACT,gBAlBwB,wCAoBZC,EAAS,yCAAG,WAAOd,EAAOC,GAAQ,uFAC9Bc,EAAAA,EAAAA,IAA2BZ,EAAAA,EAAMH,EAAOC,GAChDG,MAAK,SAAAC,GACF,OAAOA,EAAeC,IAC1B,IAAGC,OAAM,SAAAC,GACL,OAAQA,EAAEC,MACN,IAAK,sBACD,OAAOC,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,sCAEjB,IAAK,sBACD,OAAOH,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,iBACTG,WAAW,IAEnB,IAAK,yBACD,OAAON,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,6CACTG,WAAW,IAEnB,QACI,OAAON,OAAOC,oBAAoB,CAC9BC,KAAM,QACNC,QAAS,2BAGzB,IAAE,mFACT,gBA9BqB,wCAgCTI,EAAa,WACtB,OAAOC,EAAAA,EAAAA,IAAQf,EAAAA,EACnB,EAEagB,EAAqB,SAACnB,GAC/B,OAAOoB,EAAAA,EAAAA,IAAuBjB,EAAAA,EAAMH,EACxC,EAEaqB,EAAkB,WAC3B,IAAMC,EAAW,IAAIC,EAAAA,GACrB,OAAOC,EAAAA,EAAAA,IAAgBrB,EAAAA,EAAMmB,EACjC,EAEaG,EAAyB,SAACnB,IACnCoB,EAAAA,EAAAA,IAAmBvB,EAAAA,GAAM,SAAAwB,GACrB,IACIjB,OAAOkB,UAASC,EAAAA,EAAAA,SAAQ,CAACC,GAAIxB,EAAKyB,IAAKC,WAAY,UAGvD,CAFE,MAAOC,GACLC,QAAQC,IAAIF,EAChB,CACJ,GACJ,C","sources":["helper/firebase/FirebaseAuthService.js"],"sourcesContent":["import {auth,} from \"./FirebaseConfig\";\nimport {\n    createUserWithEmailAndPassword,\n    GoogleAuthProvider,\n    onAuthStateChanged,\n    sendPasswordResetEmail,\n    signInWithEmailAndPassword,\n    signInWithPopup,\n    signOut\n} from 'firebase/auth';\nimport {getById} from \"./FirestoreApi\";\n\nexport const registerUser = async (email, password) => {\n    return await createUserWithEmailAndPassword(auth, email, password)\n        .then(userCredential => {\n            return userCredential.user\n        }).catch(e => {\n            switch (e.code) {\n                case 'auth/email-already-in-use':\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'Email already in use, please choose another one'\n                    });\n                default:\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'Internal Error'\n                    });\n            }\n        })\n};\n\nexport const loginUser = async (email, password) => {\n    return await signInWithEmailAndPassword(auth, email, password)\n        .then(userCredential => {\n            return userCredential.user\n        }).catch(e => {\n            switch (e.code) {\n                case 'auth/wrong-password':\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'Wrong Password, Double check Caps'\n                    });\n                case 'auth/user-not-found':\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'User not Found',\n                        important: true\n                    });\n                case 'auth/too-many-requests':\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'Too many request was made, try again later',\n                        important: true\n                    });\n                default:\n                    return window.displayNotification({\n                        type: 'error',\n                        content: 'Firebase Unknown Error'\n                    })\n            }\n        })\n}\n\nexport const logoutUser = () => {\n    return signOut(auth);\n}\n\nexport const passwordResetEmail = (email) => {\n    return sendPasswordResetEmail(auth, email);\n}\n\nexport const loginWithGoogle = () => {\n    const provider = new GoogleAuthProvider()\n    return signInWithPopup(auth, provider);\n}\n\nexport const subscribeToAuthChanges = (user) => {\n    onAuthStateChanged(auth, _ => {\n        try {\n            window.dispatch(getById({id: user.uid, collection: 'users'}))\n        } catch (err) {\n            console.log(err);\n        }\n    })\n}"],"names":["registerUser","email","password","createUserWithEmailAndPassword","auth","then","userCredential","user","catch","e","code","window","displayNotification","type","content","loginUser","signInWithEmailAndPassword","important","logoutUser","signOut","passwordResetEmail","sendPasswordResetEmail","loginWithGoogle","provider","GoogleAuthProvider","signInWithPopup","subscribeToAuthChanges","onAuthStateChanged","_","dispatch","getById","id","uid","collection","err","console","log"],"sourceRoot":""}